generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  sales_admin
  team_leader
  sales_rep
}

enum LeadStatus {
  fresh_lead
  follow_up
  scheduled_visit
  open_deal
  cancellation
}
enum installmentPeriod{
  monthly
  quarterly
  yearly
  custom
}

enum InventoryStatus {
  available
  reserved
  sold
  under_construction
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  name         String     @default("user")
  password     String
  role         Role
  refreshToken String?
  createdAt    DateTime   @default(now())
  image        String? // صورة واحدة فقط
  leads        Lead[]
  teamLeader   User?      @relation("TeamMembers", fields: [teamLeaderId], references: [id])
  teamLeaderId String?
  teamMembers  User[]     @relation("TeamMembers")
  logs         Log[]
  Contract     Contract[]
  meetings     Meeting[]  // Back-relation to Meeting
}

model Lead {
  id                  String     @id @default(uuid())
  name                 String
  nameAr                String
  nameEn                String
  contact             String     @unique
  budget              String
  leadSource          String
  status              LeadStatus
  notes               String?
  lastCall            DateTime?
  lastVisit           DateTime?
  owner               User       @relation(fields: [ownerId], references: [id])
  ownerId             String
  inventoryInterest   Inventory? @relation(fields: [inventoryInterestId], references: [id])
  inventoryInterestId String?
  calls               Call[]
  visits              Visit[]
  createdAt           DateTime   @default(now())
  logs                Log[]
  Contract            Contract[]
  meetings Meeting[]

}

model Inventory {
  id           String           @id @default(uuid())
  title        String
  description  String?
  price        Float
  area         Float
  bedrooms     Int
  bathrooms    Int
  unitNumber   String?
  floor        Int?
  images       String? // ←  حقل JSON string (مثلاً: '["url1", "url2"]') عشان mysql مش بيدعم الفكرة بتاعت array of String
  status       InventoryStatus  @default(available)
  project      Project?         @relation(fields: [projectId], references: [id])
  projectId    String?
  paymentPlan  PaymentPlan?     @relation(fields: [paymentPlanId], references: [id])
  paymentPlanId String?
  leads        Lead[]
  visits       Visit[]
  createdAt    DateTime         @default(now())
  Contract     Contract[]
  meetings     Meeting[]        // Back-relation to Meeting
}

model Project {
  id           String        @id @default(uuid())
  nameEn       String
  nameAr       String?       // <- Optional
  location     String
  type         String
  description  String?       // <- Optional
  images       String?       // <- Optional

  developer    Developer?    @relation(fields: [developerId], references: [id])
  developerId  String?       // <- Optional

  zone         Zone?         @relation(fields: [zoneId], references: [id])
  zoneId       String?       // <- Optional

  paymentPlans PaymentPlan[]
  inventories  Inventory[]
  calls        Call[]
  Contract     Contract[]
  meetings     Meeting[]

  createdAt    DateTime @default(now())
}


model Visit {
  id          String    @id @default(uuid())
  date        DateTime
  status      String
  notes       String?
  lead        Lead      @relation(fields: [leadId], references: [id])
  leadId      String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  createdAt   DateTime  @default(now())
}

model Call {
  id        String   @id @default(uuid())
  date      DateTime
  outcome   String
  duration  Int
  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  notes     String?
  lead      Lead     @relation(fields: [leadId], references: [id])
  leadId    String
  createdAt DateTime @default(now())
}

model Log {
  id          Int      @id @default(autoincrement())
  action      String
  description String?
  userId      String
  userName    String?
  email       String?
  userRole    String?
  leadId      String?
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user User  @relation(fields: [userId], references: [id])
  lead Lead? @relation(fields: [leadId], references: [id])
}

model Zone {
  id          String    @id @default(uuid())
  nameEn        String
  nameAr        String?
  description String?
  latitude    Float
  longitude   Float
  projects    Project[]
}

model Developer {
  id          String    @id @default(uuid())
  nameEn        String
 location      String
 established   String
 nameAr        String
  logo        String?
  projects    Project[]
}

model PaymentPlan {
  id                 String      @id @default(uuid())
  downpayment        Float
  installment        Float
  delivery           Float
  schedule           Json
  description        String?
  yearsToPay         Int?
  installmentPeriod  Int
  installmentEvery   Int

 project   Project   @relation(fields: [projectId], references: [id])
projectId String


  inventories        Inventory[]
  createdAt          DateTime    @default(now())


}
model Contract {
  id           String     @id @default(uuid())
  lead         Lead       @relation(fields: [leadId], references: [id])
  leadId       String
  inventory    Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId  String?
  project      Project?   @relation(fields: [projectId], references: [id])
  projectId    String?

  
  dealValue    Float
  contractDate DateTime
  status       String // e.g., "pending", "signed", "cancelled"
  createdBy    User       @relation(fields: [createdById], references: [id])
  createdById  String
  notes        String?
  createdAt    DateTime   @default(now())
}

model Meeting {
  id          String    @id @default(uuid())
  date        DateTime
  status      String    // e.g. "scheduled", "completed", "cancelled", "rescheduled"
  notes       String?
  objections  String?
  location    String?   // optional, like "office", "site", or custom address

  lead        Lead      @relation(fields: [leadId], references: [id])
  leadId      String

  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String

  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  inventoryId String?

  project     Project?   @relation(fields: [projectId], references: [id])
  projectId   String?

  createdAt   DateTime  @default(now())
}
