generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  name         String     @default("user")
  password     String
  role         Role
  refreshToken String?
  createdAt    DateTime   @default(now())
  image        String?
  teamLeaderId String?
  Contract     Contract[]
  leads        Lead[]
  logs         Log[]
  visit        Visit[]

  // 👇 الحقول المطلوبة
  createdMeetings  Meeting[] @relation("CreatedMeetings")
  assignedMeetings Meeting[] @relation("AssignedMeetings")

  // العلاقة القديمة للفريق
  teamLeader   User?      @relation("TeamMembers", fields: [teamLeaderId], references: [id])
  teamMembers  User[]     @relation("TeamMembers")
}


model Lead {
  id                  String     @id @default(uuid())
  nameEn              String?
  nameAr              String?
  contact             String     @unique
  email               String?
  budget              String
  inventoryInterestId String?
  source              String?
  status              LeadStatus
  lastCall            DateTime?
  lastVisit           DateTime?
  ownerId             String
  createdAt           DateTime   @default(now())

  // العلاقات (ما اتغيرتش)
  notes             String[]
  calls             Call[]
  Contract          Contract[]
  inventoryInterest Inventory? @relation(fields: [inventoryInterestId], references: [id])
  owner             User       @relation(fields: [ownerId], references: [id])
  logs              Log[]
  meetings          Meeting[]
  visits            Visit[]
}

model Inventory {
  id             String       @id @default(uuid())
  title          String?
  titleEn        String?
  titleAr        String?
  type           String?
  price          Float?
  location       String?
  area           Float?
  bedrooms       Int?
  bathrooms      Int?
  parking        String?
  amenities      String[] // مثل ['pool', 'gym']
  typeOther      String?
  amenitiesOther String?
  images         String[] // أقصى 1 صورة بصيغة data URL
  status         String? // نصي بدل enum لتطابق FormState
  zoneId         String
  projectId      String
  developerId    String
  paymentPlanId  String?
  createdAt      DateTime     @default(now())
  project        Project      @relation(fields: [projectId], references: [id])
  paymentPlan    PaymentPlan? @relation(fields: [paymentPlanId], references: [id])
  developer      Developer    @relation(fields: [developerId], references: [id])
  zone           Zone         @relation(fields: [zoneId], references: [id])
  Contract       Contract[]
  leads          Lead[]
  meetings       Meeting[]
  visits         Visit[]
}

model Project {
  id           String        @id @default(uuid())
  nameEn       String
  nameAr       String?
  type         String
  description  String?
  images       String[]
  developerId  String?
  zoneId       String?
  createdAt    DateTime      @default(now())
  calls        Call[]
  
  inventories  Inventory[]
  meetings     Meeting[]
  paymentPlans PaymentPlan[]
  developer    Developer?    @relation(fields: [developerId], references: [id])
  zone         Zone?         @relation(fields: [zoneId], references: [id])
}

model PaymentPlan {
  id                     String            @id @default(uuid())
  downpayment            Float
  installment            Float
  delivery               Float
  schedule               String?
  description            String?
  yearsToPay             Int?
  installmentMonthsCount Float?
  firstInstallmentDate   DateTime? // ✅ جديد
  deliveryDate           DateTime? // ✅ جديد
  projectId              String
  createdAt              DateTime          @default(now())
  installmentPeriod      InstallmentPeriod
  inventories            Inventory[]
  project                Project           @relation(fields: [projectId], references: [id])
}

model Visit {
  id         String  @id @default(uuid())
  date       String? // أو ممكن تغييره إلى DateTime لو تحب
  status     String?
  objections String?
  notes      String?

  // العلاقات
  leadId      String
  inventoryId String?
  createdById String

  createdAt DateTime @default(now())

  // علاقات Prisma
  lead      Lead       @relation(fields: [leadId], references: [id])
  inventory Inventory? @relation(fields: [inventoryId], references: [id])
  createdBy User       @relation(fields: [createdById], references: [id])
}

model Call {
  id        String   @id @default(uuid())
  date      String?
  outcome   String?
  duration  String?
  project   String?
  notes     String?
  leadId    String?
  createdBy String?
  createdAt DateTime @default(now())

  lead      Lead?     @relation(fields: [leadId], references: [id])
  // لا يوجد علاقة واضحة مع Project، لذلك أزلناها
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model Log {
  id          Int      @id @default(autoincrement())
  action      String
  description String?
  userId      String
  userName    String?
  email       String?
  userRole    String?
  leadId      String?
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  lead        Lead?    @relation(fields: [leadId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Zone {
  id          String      @id @default(uuid())
  nameEn      String
  nameAr      String?
  description String?
  latitude    Float
  longitude   Float
  inventories Inventory[]
  projects    Project[]
}

model Developer {
  id          String      @id @default(uuid())
  nameEn      String
  location    String
  established String
  nameAr      String
  logo        String?
  inventories Inventory[] // ✅ حقل العلاقة العكسية
  projects    Project[]
}

model Contract {
  id           String     @id @default(uuid())
  leadId       String?
  inventoryId  String?
  dealValue    Float?
  contractDate String?
  status       ContractStatus?
  createdById  String?
  notes        String?
  createdAt    DateTime   @default(now())

  // Relations
  createdBy    User?       @relation(fields: [createdById], references: [id])
  inventory    Inventory?  @relation(fields: [inventoryId], references: [id])
  lead         Lead?       @relation(fields: [leadId], references: [id])
}

enum ContractStatus {
  Pending
  Signed
  Cancelled
}


model Meeting {
  id            String     @id @default(uuid())
  title         String?
  client        String?
  date          String?
  time          String?
  duration      String?
  type          String?
  status        String?
  location      String?     // ✅ احتفظ بهذا فقط
  locationType  String?
  notes         String?
  objections    String?
  leadId        String?
  inventoryId   String?
  projectId     String?
  createdById   String?
  assignedToId  String?
  createdAt     DateTime   @default(now())

  createdBy     User?       @relation("CreatedMeetings", fields: [createdById], references: [id])
  assignedTo    User?       @relation("AssignedMeetings", fields: [assignedToId], references: [id])
  inventory     Inventory? @relation(fields: [inventoryId], references: [id])
  lead          Lead?      @relation(fields: [leadId], references: [id])
  project       Project?   @relation(fields: [projectId], references: [id])
}


enum Role {
  admin
  sales_admin
  team_leader
  sales_rep
}

enum InstallmentPeriod {
  monthly
  quarterly
  yearly
  custom
}

enum LeadStatus {
  fresh_lead
  follow_up
  scheduled_visit
  open_deal
  cancellation
  closed_deal
  no_answer
  not_intersted_now
}

enum installmentPeriod {
  monthly
  quarterly
  yearly
  custom
}

enum InventoryStatus {
  available
  reserved
  sold
  under_construction
}
