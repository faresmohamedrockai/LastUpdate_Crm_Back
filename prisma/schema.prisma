generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  name             String     @default("user")
  password         String
  role             Role
  refreshToken     String?
  createdAt        DateTime   @default(now())
  image            String?
  teamLeaderId     String?
  Contract         Contract[]
  leads            Lead[]
  logs             Log[]
  visit            Visit[]

  createdMeetings  Meeting[] @relation("CreatedMeetings")
  assignedMeetings Meeting[] @relation("AssignedMeetings")
  createdTasks     Task[]    @relation("CreatedTasks")
  assignedTasks    Task[]    @relation("AssignedTasks")

  teamLeader  User?  @relation("TeamMembers", fields: [teamLeaderId], references: [id], onDelete: SetNull)
  teamMembers User[] @relation("TeamMembers")
}

model Lead {
  id                  String     @id @default(uuid())
  nameAr              String?
  nameEn              String?
  contact             String     @unique
  status              LeadStatus
  lastCall            DateTime?
  lastVisit           DateTime?
  ownerId             String?
  inventoryInterestId String?
  createdAt           DateTime   @default(now())
  email               String?
  notes               String[]
  source              String?
  budget              BigInt?
  calls               Call[]
  Contract            Contract[]
  inventoryInterest   Inventory? @relation(fields: [inventoryInterestId], references: [id], onDelete: SetNull)
  owner               User?      @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  logs                Log[]
  meetings            Meeting[]
  visits              Visit[]
  tasks               Task[]
}

model Inventory {
  id               String     @id @default(uuid())
  title            String?
  titleEn          String?
  titleAr          String?
  type             String?
  price            Float?
  location         String?
  area             Float?
  bedrooms         Int?
  bathrooms        Int?
  parking          String?
  amenities        String[] // مثل ['pool', 'gym']
  typeOther        String?
  amenitiesOther   String?
  images           String[] // أقصى 1 صورة بصيغة data URL
  status           String? // نصي بدل enum لتطابق FormState
  zoneId           String?
  projectId        String?
  developerId      String?
  paymentPlanIndex Int?    // Index of selected payment plan in project's paymentPlans array
  createdAt        DateTime @default(now())
  
  project     Project?     @relation(fields: [projectId], references: [id], onDelete: SetNull)
  developer   Developer?   @relation(fields: [developerId], references: [id], onDelete: SetNull)
  zone        Zone?        @relation(fields: [zoneId], references: [id], onDelete: SetNull)
  Contract    Contract[]
  leads       Lead[]
  meetings    Meeting[]
  visits      Visit[]
  tasks       Task[]
}

model Project {
  id           String        @id @default(uuid())
  nameEn       String
  nameAr       String?
  type         String
  description  String?
  images       String[]
  developerId  String?
  zoneId       String?
  createdAt    DateTime      @default(now())
  calls        Call[]
  inventories  Inventory[]
  meetings     Meeting[]
  visits       Visit[]
  paymentPlans PaymentPlan[]
  tasks        Task[]
  developer    Developer?    @relation(fields: [developerId], references: [id], onDelete: SetNull)
  zone         Zone?         @relation(fields: [zoneId], references: [id], onDelete: SetNull)
}

model PaymentPlan {
  id                     String            @id @default(uuid())
  downpayment            Float
  installment            Float
  delivery               Float
  schedule               String?
  description            String?
  yearsToPay             Int?
  projectId              String?
  createdAt              DateTime          @default(now())
  installmentPeriod      InstallmentPeriod
  deliveryDate           DateTime?
  firstInstallmentDate   DateTime?
  installmentMonthsCount Float?
  project                Project?          @relation(fields: [projectId], references: [id])
}

model Visit {
  id          String     @id @default(uuid())
  date        String?
  status      String?
  notes       String?
  leadId      String?
  createdAt   DateTime   @default(now())
  createdById String?
  objections  String?
  inventoryId String?
  projectId   String?
  createdBy   User?      @relation(fields: [createdById], references: [id])
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  lead        Lead?      @relation(fields: [leadId], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id])
}

model Call {
  id        String   @id @default(uuid())
  date      String?
  outcome   String?
  duration  String?
  projectId String?
  notes     String?
  leadId    String?
  createdAt DateTime @default(now())
  createdBy String?
  project   String?
  lead      Lead?    @relation(fields: [leadId], references: [id])
  Project   Project? @relation(fields: [projectId], references: [id])
}

model Log {
  id          Int      @id @default(autoincrement())
  action      String
  description String?
  userId      String?
  userName    String?
  email       String?
  userRole    String?
  leadId      String?
  ip          String?
  userAgent   String?
  createdAt   DateTime @default(now())
  lead        Lead?    @relation(fields: [leadId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
}

model Zone {
  id          String      @id @default(uuid())
  nameEn      String
  nameAr      String?
  description String?
  latitude    Float
  longitude   Float
  inventories Inventory[]
  projects    Project[]
}

model Developer {
  id          String      @id @default(uuid())
  nameEn      String?
  location    String?
  established String?
  nameAr      String?
  logo        String?
  email       String?
  phone       String?
  inventories Inventory[]
  projects    Project[]
}

model Contract {
  id           String          @id @default(uuid())
  leadId       String?
  inventoryId  String?
  dealValue    Float?
  contractDate String?
  createdById  String?
  notes        String?
  createdAt    DateTime        @default(now())
  status       ContractStatus?
  createdBy    User?           @relation(fields: [createdById], references: [id])
  inventory    Inventory?      @relation(fields: [inventoryId], references: [id])
  lead         Lead?           @relation(fields: [leadId], references: [id])
}

model Meeting {
  id           String     @id @default(uuid())
  date         String?
  status       String?
  notes        String?
  objections   String?
  location     String?
  leadId       String?
  createdById  String?
  inventoryId  String?
  projectId    String?
  createdAt    DateTime   @default(now())
  assignedToId String?
  client       String?
  duration     String?
  time         String?
  title        String?
  type         String?
  locationType String?
  assignedTo   User?      @relation("AssignedMeetings", fields: [assignedToId], references: [id])
  createdBy    User?      @relation("CreatedMeetings", fields: [createdById], references: [id])
  inventory    Inventory? @relation(fields: [inventoryId], references: [id])
  lead         Lead?      @relation(fields: [leadId], references: [id])
  project      Project?   @relation(fields: [projectId], references: [id])
}

enum ContractStatus {
  Pending
  Signed
  Cancelled
}

enum Role {
  admin
  sales_admin
  team_leader
  sales_rep
}

enum InstallmentPeriod {
  monthly
  quarterly
  yearly
  custom
}

enum LeadStatus {
  fresh_lead
  follow_up
  scheduled_visit
  open_deal
  cancellation
  closed_deal
  no_answer
  not_intersted_now
  reservation
}

enum installmentPeriod {
  monthly
  quarterly
  yearly
  custom
}

enum InventoryStatus {
  available
  reserved
  sold
  under_construction
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime
  priority    TaskPriority @default(medium)
  status      TaskStatus   @default(pending)
  type        TaskType
  reminder    Boolean      @default(true)
  reminderTime DateTime?
  emailSent   Boolean      @default(false)
  
  // Relations
  assignedToId String?
  createdById  String?
  leadId       String?
  projectId    String?
  inventoryId  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  assignedTo User?      @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)
  createdBy  User?      @relation("CreatedTasks", fields: [createdById], references: [id], onDelete: SetNull)
  lead      Lead?       @relation(fields: [leadId], references: [id], onDelete: SetNull)
  project   Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  inventory Inventory?  @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum TaskStatus {
  pending
  in_progress
  completed
  cancelled
  overdue
}

enum TaskType {
  follow_up
  meeting_preparation
  contract_review
  payment_reminder
  visit_scheduling
  lead_nurturing
  general
}
